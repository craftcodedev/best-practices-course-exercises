Install-Package Microsoft.EntityFrameworkCore.Tools -Version 2.1.4


- Crear carpeta src/Domain/Bus/UseCase

Crear clases IRequest, IReponse, IUseCase, IUseCaseBus

    public interface IUseCaseBus
    {
        void Subscribe(IUseCase useCase);

        IResponse Dispatch(IRequest request);
    }

- Crear carpeta src/Shared/Infrastructure/Bus/UseCase

Crear clase UseCaseBus


    public class UseCaseBus : IUseCaseBus
    {
        private Dictionary<string, IUseCase> useCases = new Dictionary<string, IUseCase>();

        public UseCaseBus()
        {
            useCases = new Dictionary<string, IUseCase>();
        }

        public void Subscribe(IUseCase useCase)
        {
            string className = useCase.GetType().ToString();
            this.useCases.Add(className, useCase);
        }

        public IResponse Dispatch(IRequest request)
        {
            string className = request.GetType().ToString();
            string[] words = className.Split(new string[] { "Request" }, StringSplitOptions.None);

            string useCaseName = words[0] + "UseCase";

            if (!this.useCases.ContainsKey(useCaseName))
            {
                throw new System.Exception("do not exist the use case " + useCaseName);
            }

            return useCases[useCaseName].Execute(request);
        }
    }


Añadir clase valueObject en Shared/Domain

public abstract class ValueObject
    {
        protected abstract IEnumerable<object> GetAtomicValues();

        public override bool Equals(object obj)
        {
            if (obj == null || obj.GetType() != GetType())
            {
                return false;
            }

            ValueObject other = (ValueObject)obj;
            IEnumerator<object> thisValues = GetAtomicValues().GetEnumerator();
            IEnumerator<object> otherValues = other.GetAtomicValues().GetEnumerator();
            while (thisValues.MoveNext() && otherValues.MoveNext())
            {
                if (ReferenceEquals(thisValues.Current, null) ^
                    ReferenceEquals(otherValues.Current, null))
                {
                    return false;
                }

                if (thisValues.Current != null &&
                    !thisValues.Current.Equals(otherValues.Current))
                {
                    return false;
                }
            }
            return !thisValues.MoveNext() && !otherValues.MoveNext();
        }
    }


Crear los V.O. en la carpeta src/Domain/UserAggregate

    public class UserEmail
    {
        public UserEmail(string value)
        {
            try
            {
                new System.Net.Mail.MailAddress(value);
            }
            catch
            {
                throw InvalidCustomerAttributeException.FromValue("email", value);
            }
        }
    }

    public class UserId : UUID
    {
        public UserId(string value) : base(value) {}
    }


Añadir en Shared/Domain las clases StringValueObject y UUID:

    public abstract class StringValueObject : ValueObject
    {
        private string value;

        public StringValueObject(string value)
        {
            this.value = value;
        }

        public string GetValue()
        {
            return this.value;
        }

        protected override IEnumerable<object> GetAtomicValues()
        {
            yield return this.value;
        }
    }

    public class UUID : StringValueObject
    {
        private const string UUIDV4PATTERN = @"^(\{{0,1}([0-9a-fA-F]){8}-([0-9a-fA-F]){4}-([0-9a-fA-F]){4}-([0-9a-fA-F]){4}-([0-9a-fA-F]){12}\}{0,1})$";

        public UUID(string value) : base(value)
        {
            if (string.IsNullOrEmpty(value))
            {
                throw InvalidUUIDException.FromEmpty("UUID");
            }

            if (!UUID.Is(value))
            {
                throw InvalidUUIDException.FromValue("UUID", value);
            }
        }

        public static bool Is(string value)
        {
            Regex regex = new Regex(UUID.UUIDV4PATTERN);
            Match match = regex.Match(value);

            if (match.Success)
            {
                return true;
            }

            return false;
        }
    }

Añadir las excepciones en Shared/Domain/Exception:

    public class InvalidUUIDException : InvalidAttributeException
    {
        public InvalidUUIDException(string message): base(message){}
    }

    public class InvalidAttributeException : ValidationException
    {
        public InvalidAttributeException(string message): base(message){}

        public static InvalidUUIDException FromText(string text)
        {
            return new InvalidUUIDException(text);
        }

        public static InvalidUUIDException FromEmpty(string attribute)
        {
            return new InvalidUUIDException(string.Format("the {0} must not be empty", attribute));
        }

        public static InvalidUUIDException FromValue(string attribute, string value)
        {
            return new InvalidUUIDException(string.Format("the {0} is invalid because of its value {1}", attribute, value));
        }

        public static InvalidUUIDException FromMaxLength(string attribute, int length)
        {
            return new InvalidUUIDException(string.Format("length {0} cannot be more than {1} characters.", attribute, length.ToString()));
        }
    }


Crear clase User:

public class User
    {
        private User(
            UserId id,
            UserEmail email,
            string password,
            string firstName,
            string lastName,
            string country,
            DateTime createdAt,
            DateTime updatedAt
        )
        {
            this.Id = id;
            this.Email = email;
            this.Password = password;
            this.FirstName = firstName;
            this.LastName = lastName;
            this.Country = country;
            this.CreatedAt = createdAt;
            this.UpdatedAt = updatedAt;
        }

        public static User SignUp(
            UserId id,
            UserEmail email,
            string password,
            string firstName,
            string lastName,
            string country
        )
        {
            DateTime createdAt = DateTime.Now;
            DateTime updatedAt = DateTime.Now;
            User user = new User(id, email, password, firstName, lastName, country, createdAt, updatedAt);

            return user;
        }

        public UserId Id { get; private set; }

        public UserEmail Email { get; private set; }

        public string Password { get; private set; }

        public string FirstName { get; private set; }

        public string LastName { get; private set; }

        public string Country { get; private set; }

        public DateTime CreatedAt { get; private set; }

        public DateTime UpdatedAt { get; private set; }
    }

Añadir IRepository en Shared/Domain:

    public interface IRepository<TEntity> : IDisposable where TEntity : class
    {
        void Add(TEntity obj);
        TEntity GetById(string id);
        IQueryable<TEntity> GetAll();
        void Update(TEntity obj);
        void Remove(Guid id);
        int SaveChanges();
    }

Añadir UserMap en src/Infrastructure/Persistence/Mapping:

    public class UserMap : IEntityTypeConfiguration<User>
    {
        public void Configure(EntityTypeBuilder<User> builder)
        {
            builder
                .Property(c => c.Id)
                .HasColumnType("nvarchar(50)")
                .HasConversion(
                    v => v.GetValue(),
                    v => new UserId(v)
                )
                .IsRequired();

            builder
                .Property(c => c.Email)
                .HasColumnType("nvarchar(50)")
                .HasConversion(
                    v => v.GetValue(),
                    v => new UserEmail(v)
                )
                .IsRequired();

            builder
                .Property(c => c.Password)
                .HasColumnType("nvarchar(50)")
                .IsRequired();

            builder
                .Property(c => c.FirstName)
                .HasColumnType("nvarchar(20)")
                .IsRequired();

            builder
                .Property(c => c.LastName)
                .HasColumnType("nvarchar(20)")
                .IsRequired();

            builder
                .Property(c => c.Country)
                .HasColumnType("nvarchar(20)")
                .IsRequired();

            builder
                .Property(c => c.Country)
                .HasColumnType("nvarchar(20)")
                .IsRequired();

            builder.Property(c => c.CreatedAt)
                .HasColumnType("datetime2")
                .IsRequired();

            builder.Property(c => c.UpdatedAt)
                .HasColumnType("datetime2")
                .IsRequired();
        }
    }

Añadir UserContext en src/Infrastructure/Persistence/Context:

    public class UserContext : DbContext
    {
        private readonly IHostingEnvironment _env;

        public UserContext(IHostingEnvironment env)
        {
            _env = env;
        }

        public DbSet<User> Customers { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.ApplyConfiguration(new UserMap());
            base.OnModelCreating(modelBuilder);
        }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            // get the configuration from the app settings
            var config = new ConfigurationBuilder()
                .SetBasePath(_env.ContentRootPath)
                .AddJsonFile("appsettings.json")
                .Build();

            // define the database to use
            //optionsBuilder.UseSqlServer(config.GetConnectionString("DefaultConnection"));

            optionsBuilder.UseMySQL("server=localhost;database=library;user=user;password=password");

        }
    }


Añadir Repository en src/Infrastructure/Persistence/Repository:

    public class Repository<TEntity> : IRepository<TEntity> where TEntity : class
    {
        protected readonly UserContext Db;
        protected readonly DbSet<TEntity> DbSet;

        public Repository(UserContext context)
        {
            Db = context;
            DbSet = Db.Set<TEntity>();
        }

        public virtual void Add(TEntity obj)
        {
            DbSet.Add(obj);
        }

        public virtual TEntity GetById(string id)
        {
            return DbSet.Find(id);
        }

        public virtual IQueryable<TEntity> GetAll()
        {
            return DbSet;
        }

        public virtual void Update(TEntity obj)
        {
            DbSet.Update(obj);
        }

        public virtual void Remove(Guid id)
        {
            DbSet.Remove(DbSet.Find(id));
        }

        public int SaveChanges()
        {
            return Db.SaveChanges();
        }

        public void Dispose()
        {
            Db.Dispose();
            GC.SuppressFinalize(this);
        }
    }


Añadir IUserRepository en src/Domain/UserAggregate:

    public interface IUserRepository
    {
        User FindOneById(UserId id);
        User FindOneByEmail(UserEmail email);
        void Save(User customer);
    }

Añadir UserRepository en src/Infrastructure/Persistence/Repository:

    public class UserRepository : Repository<User>, IUserRepository
    {
        private readonly IServiceScopeFactory _scopeFactory;

        public UserRepository(UserContext context, IServiceScopeFactory scopeFactory)
            : base(context)
        {
            _scopeFactory = scopeFactory;
        }

        public User FindOneByEmail(UserEmail email)
        {
            using (var scope = _scopeFactory.CreateScope())
            {
                var dbContext = scope.ServiceProvider.GetRequiredService<UserContext>();
                return dbContext.Customers.FirstOrDefault(c => c.Email.GetValue() == email.GetValue());
            }
        }

        public User FindOneById(UserId id)
        {
            using (var scope = _scopeFactory.CreateScope())
            {
                var dbContext = scope.ServiceProvider.GetRequiredService<UserContext>();
                return dbContext.Customers.FirstOrDefault(c => c.Id.GetValue() == id.GetValue());
            }
        }

        public void Save(User user)
        {
            using (var scope = _scopeFactory.CreateScope())
            {
                var dbContext = scope.ServiceProvider.GetRequiredService<UserContext>();
                dbContext.Customers.Add(user);
                dbContext.SaveChanges();
            }
        }
    }

Añadir SignUpUserValidator en UserAggregate/Service:

    public class SignUpUserValidator
    {
        private IUserRepository userRepository;

        public SignUpUserValidator(IUserRepository userRepository)
        {
            this.userRepository = userRepository;
        }

        public void Validate(UserEmail email)
        {
            User user = this.userRepository.FindOneByEmail(email);

            if (user is User)
            {
                throw UserFoundException.FromEmail(email);
            }
        }
    }

Añadir IUserFactory en UserAggregate:

    public interface IUserFactory
    {
        User Create(
            string id,
            string email,
            string password,
            string firstName,
            string lastName,
            string country
        );
    }

Añadir UserFactory en src/Infrastructure/Service/User:

    public class UserFactory : IUserFactory
    {
        private IHashing hashing;

        public UserFactory(IHashing hashing)
        {
            this.hashing = hashing;
        }

        public Domain.UserAggregate.User Create(string id, string email, string password, string firstName, string lastName, string country)
        {
            password = this.hashing.Hash(password);
            UserId userId = new UserId(id);
            UserEmail userEmail = new UserEmail(email);

            return Domain.UserAggregate.User.SignUp(userId, userEmail, password, firstName, lastName, country);
        }
    }

Añadir IHashing en src/Infrastructure/Service/Hashing:

    public interface IHashing
    {
        string Hash(string password);
    }

Añadir DefaultHashing en src/Infrastructure/Service/Hashing:


    public class DefaultHashing : IHashing
    {
        public string Hash(string password)
        {
            var bytes = new UTF8Encoding().GetBytes(password);
            byte[] hashBytes;
            
            using (var algorithm = new SHA512Managed())
            {
                hashBytes = algorithm.ComputeHash(bytes);
            }

            return Convert.ToBase64String(hashBytes);
        }
    }

Añadir SignUpUserRequest en src/Application/UseCase/User:

    public class SignUpUserRequest : IRequest
    {
        public SignUpUserRequest(
            string id,
            string email,
            string password,
            string repeatPassword,
            string firstName,
            string lastName,
            string country
        )
        {
            this.Id = id;
            this.Email = email;
            this.Password = password;
            this.RepeatPassword = repeatPassword;
            this.FirstName = firstName;
            this.LastName = lastName;
            this.Country = country;
        }

        public string Id { get; }
        public string Email { get; }
        public string Password { get; }
        public string RepeatPassword { get; }
        public string FirstName { get; }
        public string LastName { get; }
        public string Country { get; }
    }

Añadir SignUpUserResponse en src/Application/UseCase/User:

    public class SignUpUserResponse
    {
        public SignUpUserResponse(
            string id,
            string email,
            string firstName,
            string lastName,
            string country,
            string role
        )
        {
            this.Id = id;
            this.Email = email;
            this.FirstName = firstName;
            this.LastName = lastName;
            this.Country = country;
            this.Role = role;
        }

        public string Id { get; }
        public string Email { get; }
        public string FirstName { get; }
        public string LastName { get; }
        public string Country { get; }
        public string Role { get; }
    }


Añadir SignUpUserUseCase en src/Application/UseCase/User:

    public class SignUpUserUseCase : IUseCase
    {
        private IUserFactory userFactory;
        private SignUpUserValidator signUpUserValidator;
        private IUserRepository userRepository;

        public SignUpUserUseCase(
            IUserFactory userFactory,
            SignUpUserValidator signUpUserValidator,
            IUserRepository userRepository
        )
        {
            this.userFactory = userFactory;
            this.signUpUserValidator = signUpUserValidator;
            this.userRepository = userRepository;
        }
        public IResponse Execute(IRequest req)
        {
            SignUpUserRequest request = req as SignUpUserRequest;
            Domain.UserAggregate.User user = this.userFactory.Create(
                request.Id,
                request.Email,
                request.Password,
                request.FirstName,
                request.LastName,
                request.Country
            );

            signUpUserValidator.Validate(user.Email);

            userRepository.Save(user);

            return null;
        }
    }

Añadir UserController en src/UI/rest/Controller:

    [ApiVersion("1.0")]
    [Route("api/v{version:apiVersion}/[controller]")]
    [ApiController]
    public class UserController : ControllerBase
    {
        private IUseCaseBus useCaseBus;

        public UserController(IUseCaseBus useCaseBus)
        {
            this.useCaseBus = useCaseBus;
        }
               
        [HttpPost(Name = nameof(SignUp))]
        public IActionResult SignUp([FromBody] SignUpUserRequest request)
        {
            IResponse response = this.useCaseBus.Dispatch(request);
            return Ok(response);
        }
    }



